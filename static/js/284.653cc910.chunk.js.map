{"version":3,"file":"static/js/284.653cc910.chunk.js","mappings":"0RAGaA,EAAYC,EAAAA,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0LAWtBC,GAAQH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAYK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,qEAapBI,GAPYN,EAAAA,EAAAA,MAAYO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,sFAOhBF,EAAAA,EAAAA,GAAOQ,EAAAA,GAAPR,CAAoBS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,iDAK5BQ,EAAaV,EAAAA,EAAAA,OAAaW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,kQ,sHC7B1BU,G,QAASC,EAAAA,SAAaC,MAAM,CACvCC,KAAMF,EAAAA,SAEHG,OACAC,QAAQ,0HACRC,SACC,0IAEJC,OAAQN,EAAAA,SAAaO,MAAM,MAAM,MAGtBC,EAAcR,EAAAA,SAAaC,MAAM,CAC5CQ,MAAOT,EAAAA,SAAaS,QAAQJ,SAAS,sBACrCK,SAAUV,EAAAA,SAEPK,SAAS,2BAGDM,EAAiBX,EAAAA,SAAaC,MAAM,CAC/CC,KAAMF,EAAAA,SAEHG,OACAC,QAAQ,0HACRC,SACC,0IAEJI,MAAOT,EAAAA,SAAaS,QAAQJ,SAAS,sBACrCK,SAAUV,EAAAA,SAEPK,SAAS,yBACTO,IAAI,EAAG,sDACPR,QAAQ,WAAY,6C,wJC/BZlB,E,OAAYC,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yB,UCM7BwB,EAAgB,CACpBJ,MAAO,GACPC,SAAU,IAGL,SAASI,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MAMjB,OACEC,EAAAA,EAAAA,KAAC/B,EAAS,CAAAgC,UACRD,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CACLN,cAAeA,EACfO,SARe,SAACC,EAAMC,GAAqB,IAAjBC,EAASD,EAATC,UAC9BR,GAASS,EAAAA,EAAAA,IAAM,CAAEf,MAAOY,EAAOZ,MAAOC,SAAUW,EAAOX,YACvDa,GACF,EAMME,iBAAkBjB,EAAAA,GAAYU,UAE9BQ,EAAAA,EAAAA,MAACpC,EAAAA,GAAK,CAAA4B,SAAA,EACJD,EAAAA,EAAAA,KAACU,EAAAA,GAAK,CAACC,GAAIC,EAAAA,EAAWC,MAAM,QAAQC,KAAK,QAAQ7B,KAAK,WACtDe,EAAAA,EAAAA,KAACtB,EAAAA,GAAY,CAACO,KAAK,QAAQ8B,UAAU,UACrCf,EAAAA,EAAAA,KAACU,EAAAA,GAAK,CAACC,GAAIC,EAAAA,EAAWC,MAAM,WAAWC,KAAK,WAAW7B,KAAK,cAC5De,EAAAA,EAAAA,KAACtB,EAAAA,GAAY,CAACO,KAAK,WAAW8B,UAAU,UACxCf,EAAAA,EAAAA,KAACgB,EAAAA,EAAM,CAACC,QAAQ,WAAWH,KAAK,SAAQb,SAAC,gBAOnD,CC9BA,MARA,WACE,OACED,EAAAA,EAAAA,KAAA,OAAKkB,MAAO,CAACC,QAAS,QAAUlB,UAC9BD,EAAAA,EAAAA,KAACH,EAAS,KAGhB,C","sources":["components/ContactsForm/ContactsForm.styled.jsx","components/schema/schema.jsx","components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, ErrorMessage } from 'formik';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 540px;\n  border: 1px solid black;\n  padding: 20px;\n  font-size: 20px;\n  border-radius: 15px;\n  margin-bottom: 10px;\n`;\n\nexport const Forms = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  width: 100%;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  text-align: center;\n  color: red;\n`;\n\nexport const FormButton = styled.button`\n  display: block;\n  min-width: 150px;\n  margin: 20px auto;\n  font-size: 20px;\n  padding: 15px 20px;\n  border-radius: 20px;\n  border: none;\n  background-color: grey;\n  color: white;\n\n  :hover,\n  :focus {\n    background-color: blue;\n  }\n`;\n","import * as yup from 'yup';\nimport 'yup-phone';\n\nexport const schema = yup.object().shape({\n  name: yup\n    .string()\n    .trim()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/)\n    .required(\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d`Artagnan'\n    ),\n  number: yup.string().phone('UA', true),\n});\n\nexport const loginSchema = yup.object().shape({\n  email: yup.string().email().required('Please enter email'),\n  password: yup\n    .string()\n    .required('No password provided.')   \n});\n\nexport const registerSchema = yup.object().shape({\n  name: yup\n    .string()\n    .trim()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/)\n    .required(\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d`Artagnan'\n    ),\n  email: yup.string().email().required('Please enter email'),\n  password: yup\n    .string()\n    .required('No password provided.')\n    .min(3, 'Password is too short - should be 8 chars minimum.')\n    .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.'),\n});\n","import styled from '@emotion/styled';\n// import { Form, ErrorMessage } from 'formik';\n\nexport const Container = styled.div`\nwidth: 540px;\n`","import { Button, TextField } from '@mui/material';\nimport { Forms } from 'components/ContactsForm/ContactsForm.styled';\nimport { loginSchema } from 'components/schema/schema';\nimport { ErrorMessage, Field, Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { login } from 'redux/auth/operations';\nimport { Container } from './LoginForm.styled';\n\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nexport function LoginForm() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(login({ email: values.email, password: values.password }));\n    resetForm();\n  };\n  return (\n    <Container>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={loginSchema}\n      >\n        <Forms>\n          <Field as={TextField} label=\"Email\" type=\"email\" name=\"email\" />\n          <ErrorMessage name=\"email\" component=\"span\" />\n          <Field as={TextField} label=\"Password\" type=\"password\" name=\"password\" />\n          <ErrorMessage name=\"password\" component=\"span\" />\n          <Button variant=\"outlined\" type=\"submit\">\n            Login\n          </Button>\n        </Forms>\n      </Formik>\n    </Container>\n  );\n}\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nfunction Login() {\n  return (\n    <div style={{display: 'flex', }}>\n      <LoginForm />\n    </div>\n  );\n}\n\nexport default Login;\n"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","Forms","Form","_templateObject2","Error","_templateObject3","ErrorMessage","_templateObject4","FormButton","_templateObject5","schema","yup","shape","name","trim","matches","required","number","phone","loginSchema","email","password","registerSchema","min","initialValues","LoginForm","dispatch","useDispatch","_jsx","children","Formik","onSubmit","values","_ref","resetForm","login","validationSchema","_jsxs","Field","as","TextField","label","type","component","Button","variant","style","display"],"sourceRoot":""}